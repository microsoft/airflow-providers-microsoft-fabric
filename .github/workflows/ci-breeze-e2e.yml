name: Run Airflow Integration Tests

on:
  pull_request:
    branches: ["**"]
  schedule:
    - cron: '0 3 * * *'  # Daily at 3 AM UTC

env:
  FABRIC_WORKSPACE_ID: your-workspace-id-here
  FABRIC_ITEM_ID: your-item-id-here
  AIRFLOW_HOME: /home/airflow

jobs:
  E2E-Integration-Tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        include:
          - python-version: "3.12"
            airflow-version: "2.10.5"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check initial memory state (host)
      run: |
        echo "=== INITIAL MEMORY STATE ON HOST ==="
        free -h
        df -h

    - name: Pull Airflow production image from Docker Hub
      run: |
        docker pull apache/airflow:${{ matrix.airflow-version }}-python${{ matrix.python-version }}

    - name: Start Airflow container (basic setup)
      run: |
        echo "=== HOST MEMORY BEFORE CONTAINER START ==="
        free -h
        df -h

        docker run -d --memory=8g --memory-swap=8g --name airflow_ci \
          -e AIRFLOW__CORE__LOAD_EXAMPLES=False \
          -e AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=sqlite:///$AIRFLOW_HOME/airflow.db \
          -e AIRFLOW_HOME=$AIRFLOW_HOME \
          -e AIRFLOW__WEBSERVER__WORKERS=1 \
          -e AIRFLOW__SCHEDULER__PARSING_PROCESSES=1 \
          -e AIRFLOW__LOGGING__LOGGING_LEVEL=INFO \
          -e AIRFLOW__CORE__STORE_SERIALIZED_DAGS=True \
          -e AIRFLOW__CORE__STORE_DAG_CODE=True \
          -e AIRFLOW__CORE__EXECUTOR=SequentialExecutor \
          -e AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False \
          -e AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL=10 \
          -e AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT=False \
          apache/airflow:${{ matrix.airflow-version }}-python${{ matrix.python-version }} \
          bash -c "while true; do sleep 30; done"

        echo "=== WAITING FOR CONTAINER TO START ==="
        sleep 10

        # Verify container is running
        if ! docker ps | grep -q airflow_ci; then
          echo "Container failed to start. Checking logs..."
          docker logs airflow_ci
          exit 1
        fi

        echo "=== CONTAINER MEMORY USAGE ==="
        docker stats --no-stream airflow_ci

    - name: Build provider wheel locally
      run: |
        pip install build
        python -m build -o dist_local

    - name: Copy provider wheel into container
      run: |
        docker exec airflow_ci mkdir -p /tmp/wheels
        docker cp dist_local/. airflow_ci:/tmp/wheels/

    - name: Install provider wheel in container
      run: |
        docker exec airflow_ci bash -c "pip install --no-cache-dir /tmp/wheels/apache_airflow_providers_microsoft_fabric-*.whl"
        docker stats --no-stream airflow_ci

    - name: Initialize Airflow database
      run: |
        echo "=== INITIALIZING AIRFLOW DATABASE ==="
        docker exec airflow_ci airflow db init

        echo "=== CREATING AIRFLOW USER ==="
        docker exec airflow_ci airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin || echo "User creation failed or user already exists"

    - name: Parse Fabric credentials from JSON secret
      id: fabric_auth
      run: |
        echo '${{ secrets.FABRIC_AUTH_JSON }}' > fabric.json
        echo "client_id=$(jq -r .client_id fabric.json)" >> $GITHUB_OUTPUT
        echo "tenant_id=$(jq -r .tenant_id fabric.json)" >> $GITHUB_OUTPUT
        echo "client_secret=$(jq -r .client_secret fabric.json)" >> $GITHUB_OUTPUT

    - name: Start Airflow components with staggered startup
      run: |
        echo "=== STARTING AIRFLOW COMPONENTS ==="
        # Start scheduler in background and get its PID
        echo "Starting scheduler..."
        docker exec -d airflow_ci bash -c "cd $AIRFLOW_HOME && airflow scheduler >> \$AIRFLOW_HOME/logs/scheduler.log 2>&1"
        
        # Start webserver in background 
        echo "Starting webserver..."
        docker exec -d airflow_ci bash -c "cd $AIRFLOW_HOME && airflow webserver --port 8080 >> \$AIRFLOW_HOME/logs/webserver.log 2>&1"
        
        # Start triggerer in background
        echo "Starting triggerer..."
        docker exec -d airflow_ci bash -c "cd $AIRFLOW_HOME && airflow triggerer >> \$AIRFLOW_HOME/logs/triggerer.log 2>&1"

        echo "Waiting for components to start ..."
        sleep 10

        echo "Running health check ..."
        set -e
        RETRIES=30
        echo "Checking health at http://localhost:8080/health inside container airflow_ci"

        while [ $RETRIES -gt 0 ]; do
          echo "---------------------------------------------"
          echo "Attempt $((31 - RETRIES)) of 30"

          RESPONSE=$(docker exec airflow_ci curl --silent --show-error --write-out "HTTPSTATUS:%{http_code}" -u "admin:admin" http://localhost:8080/health || true)

          BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
          STATUS=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          echo "HTTP Status Code: $STATUS"
          echo "Response Body:"
          echo "$BODY"

          if [ "$STATUS" -eq 200 ] && echo "$BODY" | grep -q '"status": "healthy"'; then
            echo "Airflow webserver and components are healthy!"
            exit 0
          fi

          echo "Not yet healthy. Retrying in 5s... ($RETRIES retries left)"
          sleep 5
          RETRIES=$((RETRIES - 1))
        done

        echo "Webserver health check failed after retries"
        exit 1

        echo "=== MEMORY STATUS ==="
        docker stats --no-stream airflow_ci

    - name: Set Fabric connection in Airflow
      run: |
        docker exec airflow_ci airflow airflow providers list | grep microsoft \
        docker exec airflow_ci airflow connections add 'fabric_integration' \
          --conn-type 'microsoft-fabric' \
          --conn-extra '{
            "client_id": "${{ steps.fabric_auth.outputs.client_id }}",
            "tenant_id": "${{ steps.fabric_auth.outputs.tenant_id }}",
            "client_secret": "${{ steps.fabric_auth.outputs.client_secret }}"
          }'
        docker exec airflow_ci airflow connections get 'fabric_integration'

    - name: Deploy integration test DAGs to Airflow container
      run: |
        echo "Copying integration test DAGs to container..."
        docker exec airflow_ci bash -c "mkdir -p $AIRFLOW_HOME/dags"
        docker cp tests/system/dags/. airflow_ci:"$AIRFLOW_HOME/dags"

    - name: Wait for DAG to be parsed
      run: |
        echo "Waiting for DAG to be parsed..."
        for i in {1..30}; do
          if docker exec airflow_ci airflow dags list | grep -q "test_fabric_notebook_run"; then
            echo "DAG found after $i attempts"
            break
          fi
          echo "Attempt $i: DAG not found yet, waiting..."
          sleep 10
        done

        echo "=== ALL DAGS ==="
        docker exec airflow_ci airflow dags list

    - name: Run integration test DAG
      run: |
        echo "Triggering DAG run..."
        docker exec airflow_ci airflow dags trigger test_fabric_notebook_run

        echo "Waiting for DAG run to complete..."
        MAX_RETRIES=30
        DELAY=10

        for i in $(seq 1 $MAX_RETRIES); do
          STATUS=$(docker exec airflow_ci airflow dags list-runs -d test_fabric_notebook_run --no-color | awk '/test_fabric_notebook_run/ {print $6}' | head -n 1)
          echo "Attempt $i: Current status = $STATUS"

          if [ "$STATUS" = "success" ]; then
            echo "DAG run succeeded."
            exit 0
          elif [ "$STATUS" = "failed" ]; then
            echo "DAG run failed."
            exit 1
          fi

          echo "DAG still running... waiting $DELAY seconds."
          sleep $DELAY
        done

        echo "DAG did not complete in time."
        exit 1

    - name: Check DAG run status
      run: |
        echo "=== DAG RUNS ==="
        docker exec airflow_ci airflow dags list-runs -d test_fabric_notebook_run || echo "No DAG runs found"

        echo "=== TASK INSTANCES ==="
        docker exec airflow_ci airflow tasks list test_fabric_notebook_run || echo "No tasks found"

    - name: Copy AIRFLOW_HOME from container to host
      if: always()
      run: |
        echo "=== COPYING AIRFLOW_HOME ==="
        docker cp airflow_ci:$AIRFLOW_HOME ./airflow_home || echo "Failed to copy airflow home"

    - name: Upload Airflow Home as Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: airflow-home-${{ matrix.python-version }}-airflow-${{ matrix.airflow-version }}
        path: ./airflow_home

    - name: Stop and remove container
      if: always()
      run: |
        docker stop airflow_ci || echo "Container already stopped"
        docker rm airflow_ci || echo "Container already removed"